from groq import Groq
from typing import Dict, List, Optional
import json
import config

client = Groq(api_key=config.GROQ_API_KEY)


class MedicalAIService:
    def __init__(self):
        self.model = "llama-3.1-8b-instant"  # –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.system_prompt = """–¢—ã - –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û–ø—Ä–µ–¥–µ–ª–∏ –∫ –∫–∞–∫–æ–º—É —É–∑–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è.

–ü–†–ê–í–ò–õ–ê:
1. –ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥—É–π —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞ - —Ç–æ–ª—å–∫–æ —É–∑–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
2. –ó–∞–¥–∞–π –ú–ê–ö–°–ò–ú–£–ú 1 —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –∑–∞—Ç–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –≤—Ä–∞—á–∞
3. –ï—Å–ª–∏ —É–∂–µ –∑–∞–¥–∞–Ω 1+ –≤–æ–ø—Ä–æ—Å - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –≤—Ä–∞—á–∞ (action: recommend_doctor)
4. –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏
5. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON

–°–ü–ï–¶–ò–ê–õ–ò–°–¢–´:
–ö–∞—Ä–¥–∏–æ–ª–æ–≥, –ù–µ–≤—Ä–æ–ª–æ–≥, –ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥, –≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥, –ü—É–ª—å–º–æ–Ω–æ–ª–æ–≥, –£—Ä–æ–ª–æ–≥, –ì–∏–Ω–µ–∫–æ–ª–æ–≥, –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥, –û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥, –û—Ç–æ–ª–∞—Ä–∏–Ω–≥–æ–ª–æ–≥ (–õ–û–†), –û—Ä—Ç–æ–ø–µ–¥, –†–µ–≤–º–∞—Ç–æ–ª–æ–≥, –ê–ª–ª–µ—Ä–≥–æ–ª–æ–≥, –ü—Å–∏—Ö–∏–∞—Ç—Ä, –û–Ω–∫–æ–ª–æ–≥

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π):
{
  "action": "ask_question" –∏–ª–∏ "recommend_doctor",
  "question": "–∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ action = ask_question),
  "doctor": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ action = recommend_doctor),
  "urgency": "low/medium/high/emergency" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ action = recommend_doctor),
  "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º"
}"""
    
    async def analyze_symptoms(
        self,
        symptoms: List[str],
        qa_history: List[Dict[str, str]],
        user_profile: Optional[Dict] = None
    ) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–ø—Ç–æ–º—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥"""
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print(f"üìä –ê–Ω–∞–ª–∏–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤:")
        print(f"   –°–∏–º–ø—Ç–æ–º—ã: {symptoms}")
        print(f"   –í–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–Ω–æ: {len(qa_history)}")
        if qa_history:
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π Q&A: {qa_history[-1]}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = f"""
–ü–†–û–§–ò–õ–¨ –ü–ê–¶–ò–ï–ù–¢–ê:
{self._format_profile(user_profile)}

–°–ò–ú–ü–¢–û–ú–´:
{', '.join(symptoms)}

–ò–°–¢–û–†–ò–Ø –í–û–ü–†–û–°–û–í –ò –û–¢–í–ï–¢–û–í:
{self._format_qa_history(qa_history)}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ä–µ—à–∏: –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —É–∂–µ –º–æ–∂–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞?

–í–ê–ñ–ù–û: 
- –ï—Å–ª–∏ —É–∂–µ –∑–∞–¥–∞–Ω–æ 3+ –≤–æ–ø—Ä–æ—Å–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –≤—Ä–∞—á–∞
- –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
- –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
"""
        
        try:
            # –ü—Ä–æ–±—É–µ–º –±–µ–∑ response_format (–Ω–µ –≤—Å–µ –º–æ–¥–µ–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç)
            response = client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": self.system_prompt},
                    {"role": "user", "content": context}
                ],
                temperature=0.3,
                max_tokens=500
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            response_text = response.choices[0].message.content.strip()
            print(f"‚úÖ Groq –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω ({len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            print(f"üìù –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_text}")
            
            # –£–±–∏—Ä–∞–µ–º markdown –µ—Å–ª–∏ –µ—Å—Ç—å
            if response_text.startswith("```json"):
                response_text = response_text[7:-3].strip()
            elif response_text.startswith("```"):
                response_text = response_text[3:-3].strip()
            
            result = json.loads(response_text)
            print(f"‚úÖ JSON —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: action={result.get('action')}")
            
            if result.get('action') == 'ask_question':
                print(f"‚ùì AI –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å: {result.get('question', '')[:100]}...")
            elif result.get('action') == 'recommend_doctor':
                print(f"üë®‚Äç‚öïÔ∏è AI —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç: {result.get('doctor')} (—Å—Ä–æ—á–Ω–æ—Å—Ç—å: {result.get('urgency')})")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            if "action" not in result:
                raise ValueError("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ 'action'")
            
            return result
            
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"–û—Ç–≤–µ—Ç –æ—Ç Groq –±—ã–ª: {response_text[:500] if 'response_text' in locals() else '–Ω–µ –ø–æ–ª—É—á–µ–Ω'}")
            return {
                "action": "ask_question",
                "question": "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?",
                "reasoning": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ AI"
            }
        except Exception as e:
            error_type = type(e).__name__
            error_msg = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ {error_type}: {error_msg}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
            if hasattr(e, 'response'):
                try:
                    print(f"Response status: {e.response.status_code}")
                    error_detail = e.response.json() if hasattr(e.response, 'json') else str(e.response.content)
                    print(f"Response body: {error_detail}")
                except:
                    pass
            
            return {
                "action": "ask_question",
                "question": "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö. –ö–æ–≥–¥–∞ –æ–Ω–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –∏ –∫–∞–∫ –ø—Ä–æ—è–≤–ª—è—é—Ç—Å—è?",
                "reasoning": "–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å AI"
            }
    
    def _format_profile(self, profile: Optional[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not profile:
            return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        
        lines = []
        if profile.get("age"):
            lines.append(f"–í–æ–∑—Ä–∞—Å—Ç: {profile['age']} –ª–µ—Ç")
        if profile.get("gender"):
            gender_map = {"male": "–º—É–∂—Å–∫–æ–π", "female": "–∂–µ–Ω—Å–∫–∏–π", "other": "–¥—Ä—É–≥–æ–π"}
            lines.append(f"–ü–æ–ª: {gender_map.get(profile['gender'], profile['gender'])}")
        if profile.get("height"):
            lines.append(f"–†–æ—Å—Ç: {profile['height']} —Å–º")
        if profile.get("weight"):
            lines.append(f"–í–µ—Å: {profile['weight']} –∫–≥")
        
        return "\n".join(lines) if lines else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    
    def _format_qa_history(self, qa_history: List[Dict[str, str]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤"""
        if not qa_history:
            return "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"
        
        lines = []
        for i, qa in enumerate(qa_history, 1):
            lines.append(f"{i}. –í–æ–ø—Ä–æ—Å: {qa['question']}")
            lines.append(f"   –û—Ç–≤–µ—Ç: {qa['answer']}")
        
        return "\n".join(lines)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
ai_service = MedicalAIService()
