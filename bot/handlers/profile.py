import re
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.states import Registration, EditProfile
from bot.keyboards import (
    get_main_menu, get_phone_keyboard, get_gender_keyboard, 
    get_skip_keyboard, get_profile_menu, get_edit_profile_menu
)
from database.connection import supabase_client
from database.models import UserProfile


router = Router()


# ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ============

def parse_birthdate_flexible(text: str) -> datetime | None:
    """
    –ì–∏–±–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: –î–î.–ú–ú.–ì–ì–ì–ì, –î–î/–ú–ú/–ì–ì–ì–ì, –î–î-–ú–ú-–ì–ì–ì–ì, –î–î –ú–ú –ì–ì–ì–ì
    
    Args:
        text: –¢–µ–∫—Å—Ç —Å –¥–∞—Ç–æ–π
    
    Returns:
        datetime –æ–±—ä–µ–∫—Ç –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
    """
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = text.strip()
    
    # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    formats = [
        r'(\d{1,2})[.\s/-](\d{1,2})[.\s/-](\d{4})',  # –î–î.–ú–ú.–ì–ì–ì–ì, –î–î –ú–ú –ì–ì–ì–ì –∏ —Ç.–¥.
        r'(\d{4})[.\s/-](\d{1,2})[.\s/-](\d{1,2})',  # –ì–ì–ì–ì.–ú–ú.–î–î
    ]
    
    for pattern in formats:
        match = re.search(pattern, text)
        if match:
            groups = match.groups()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ (–¥–µ–Ω—å, –º–µ—Å—è—Ü, –≥–æ–¥)
            if len(groups[0]) == 4:  # –ì–æ–¥ –≤–ø–µ—Ä–µ–¥–∏
                year, month, day = int(groups[0]), int(groups[1]), int(groups[2])
            else:  # –î–µ–Ω—å –≤–ø–µ—Ä–µ–¥–∏
                day, month, year = int(groups[0]), int(groups[1]), int(groups[2])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            try:
                date = datetime(year, month, day)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –¥–∞—Ç—ã (–æ—Ç 1900 –≥–æ–¥–∞ –¥–æ —Å–µ–≥–æ–¥–Ω—è)
                if 1900 <= year <= datetime.now().year:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —á–µ–ª–æ–≤–µ–∫—É –æ—Ç 0 –¥–æ 120 –ª–µ—Ç
                    age = (datetime.now() - date).days // 365
                    if 0 <= age <= 120:
                        return date
            except ValueError:
                continue
    
    return None


def calculate_age(birthdate: datetime) -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    today = datetime.now()
    age = today.year - birthdate.year
    if (today.month, today.day) < (birthdate.month, birthdate.day):
        age -= 1
    return age


async def get_user_profile(user_id: int) -> UserProfile | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    try:
        response = supabase_client.table('user_profiles').select('*').eq('user_id', user_id).execute()
        if response.data:
            return UserProfile(**response.data[0])
    except Exception as e:
        print(f"DB Error: {e}")
    return None


async def update_user_profile(user_id: int, data: dict):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    try:
        data['updated_at'] = datetime.now().isoformat()
        supabase_client.table('user_profiles').upsert({
            'user_id': user_id,
            **data
        }).execute()
    except Exception as e:
        print(f"DB Error: {e}")


# ============ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ============

@router.message(Registration.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û"""
    full_name = message.text.strip()
    
    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞)
    if len(full_name.split()) < 2:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é)\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ –∏–ª–∏ –ü–µ—Ç—Ä–æ–≤ –ò–≤–∞–Ω –°–µ—Ä–≥–µ–µ–≤–∏—á"
        )
        return
    
    await state.update_data(full_name=full_name)
    await message.answer(
        "üì± *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n"
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –∫–ª–∏–Ω–∏–∫–æ–π.\n"
        "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.",
        reply_markup=get_phone_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(Registration.waiting_for_phone)


@router.message(Registration.waiting_for_phone, F.contact)
async def process_phone_contact(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç"""
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    
    await message.answer(
        "üéÇ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "‚Ä¢ 15.05.1990\n"
        "‚Ä¢ 15/05/1990\n"
        "‚Ä¢ 15 05 1990\n"
        "‚Ä¢ 1990-05-15",
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(Registration.waiting_for_birthdate)


@router.message(Registration.waiting_for_phone, F.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_phone(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await state.update_data(phone=None)
    
    await message.answer(
        "üéÇ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "‚Ä¢ 15.05.1990\n"
        "‚Ä¢ 15/05/1990\n"
        "‚Ä¢ 15 05 1990\n"
        "‚Ä¢ 1990-05-15",
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(Registration.waiting_for_birthdate)


@router.message(Registration.waiting_for_phone)
async def process_phone_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–º"""
    phone = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, + –∏ –ø—Ä–æ–±–µ–ª—ã)
    if not re.match(r'^[\d\s\+\-\(\)]+$', phone):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º' –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥."
        )
        return
    
    await state.update_data(phone=phone)
    await message.answer(
        "üéÇ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "‚Ä¢ 15.05.1990\n"
        "‚Ä¢ 15/05/1990\n"
        "‚Ä¢ 15 05 1990\n"
        "‚Ä¢ 1990-05-15",
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(Registration.waiting_for_birthdate)


@router.message(Registration.waiting_for_birthdate)
async def process_birthdate(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    birthdate = parse_birthdate_flexible(message.text)
    
    if not birthdate:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ 15.05.1990\n"
            "‚Ä¢ 15/05/1990\n"
            "‚Ä¢ 15 05 1990\n"
            "‚Ä¢ 1990-05-15"
        )
        return
    
    age = calculate_age(birthdate)
    await state.update_data(birthdate=birthdate.strftime('%Y-%m-%d'))
    
    await message.answer(
        f"‚ößÔ∏è *–ü–æ–ª*\n\n"
        f"–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:",
        reply_markup=get_gender_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(Registration.waiting_for_gender)


@router.callback_query(Registration.waiting_for_gender, F.data.startswith("gender_"))
async def process_gender(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    gender = callback.data.split("_")[1]  # male –∏–ª–∏ female
    await state.update_data(gender=gender)
    
    gender_emoji = "üë®" if gender == "male" else "üë©"
    
    await callback.message.edit_text(
        f"{gender_emoji} –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if gender == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}"
    )
    
    await callback.message.answer(
        "üìè *–†–æ—Å—Ç (–≤ —Å–º)*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ.",
        reply_markup=get_skip_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(Registration.waiting_for_height)
    await callback.answer()


@router.message(Registration.waiting_for_height, F.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_height(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ —Ä–æ—Å—Ç–∞"""
    await state.update_data(height=None)
    
    await message.answer(
        "‚öñÔ∏è *–í–µ—Å (–≤ –∫–≥)*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ.",
        reply_markup=get_skip_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(Registration.waiting_for_weight)


@router.message(Registration.waiting_for_height)
async def process_height(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞"""
    try:
        height = int(message.text.strip())
        if 50 <= height <= 250:
            await state.update_data(height=height)
            await message.answer(
                "‚öñÔ∏è *–í–µ—Å (–≤ –∫–≥)*\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ.",
                reply_markup=get_skip_keyboard(),
                parse_mode="Markdown"
            )
            await state.set_state(Registration.waiting_for_weight)
        else:
            await message.answer("‚ùå –†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 50 –¥–æ 250 —Å–º")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


@router.message(Registration.waiting_for_weight, F.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_weight(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≤–µ—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await state.update_data(weight=None)
    await finish_registration(message, state)


@router.message(Registration.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞"""
    try:
        weight = float(message.text.strip().replace(',', '.'))
        if 20 <= weight <= 300:
            await state.update_data(weight=weight)
            await finish_registration(message, state)
        else:
            await message.answer("‚ùå –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 20 –¥–æ 300 –∫–≥")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


async def finish_registration(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    data = await state.get_data()
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await update_user_profile(user_id, {
        'username': username,
        'full_name': data.get('full_name'),
        'phone': data.get('phone'),
        'birthdate': data.get('birthdate'),
        'gender': data.get('gender'),
        'height': data.get('height'),
        'weight': data.get('weight')
    })
    
    await state.clear()
    
    await message.answer(
        "‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
        "‚Ä¢ –ù–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )


# ============ –ü–†–û–°–ú–û–¢–† –ü–†–û–§–ò–õ–Ø ============

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = await get_user_profile(message.from_user.id)
    
    if not profile:
        await message.answer(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    age = calculate_age(datetime.fromisoformat(profile.birthdate)) if profile.birthdate else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    gender_text = "–ú—É–∂—Å–∫–æ–π" if profile.gender == "male" else "–ñ–µ–Ω—Å–∫–∏–π"
    
    profile_text = f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
    profile_text += f"–§–ò–û: {profile.full_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    profile_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {profile.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
    profile_text += f"–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n"
    profile_text += f"–ü–æ–ª: {gender_text}\n"
    profile_text += f"–†–æ—Å—Ç: {profile.height or '–Ω–µ —É–∫–∞–∑–∞–Ω'} —Å–º\n"
    profile_text += f"–í–µ—Å: {profile.weight or '–Ω–µ —É–∫–∞–∑–∞–Ω'} –∫–≥\n"
    
    await message.answer(
        profile_text,
        reply_markup=get_profile_menu(),
        parse_mode="Markdown"
    )


# ============ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø ============

@router.callback_query(F.data == "edit_profile")
async def start_edit_profile(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    await callback.message.edit_text(
        "‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=get_edit_profile_menu(),
        parse_mode="Markdown"
    )
    await state.set_state(EditProfile.choosing_field)
    await callback.answer()


@router.callback_query(EditProfile.choosing_field, F.data.startswith("edit_"))
async def choose_field_to_edit(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    field = callback.data.split("_", 1)[1]
    
    prompts = {
        "full_name": "üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:",
        "phone": "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        "birthdate": "üéÇ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ):",
        "gender": "‚ößÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:",
        "height": "üìè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–æ—Å—Ç (–≤ —Å–º):",
        "weight": "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å (–≤ –∫–≥):"
    }
    
    await state.update_data(editing_field=field)
    
    if field == "gender":
        await callback.message.edit_text(
            prompts[field],
            reply_markup=get_gender_keyboard()
        )
        await state.set_state(EditProfile.waiting_for_gender)
    else:
        await callback.message.edit_text(prompts[field])
        await state.set_state(getattr(EditProfile, f"waiting_for_{field}"))
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)

@router.message(EditProfile.waiting_for_full_name)
async def edit_full_name(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–û"""
    full_name = message.text.strip()
    
    if len(full_name.split()) < 2:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é)")
        return
    
    await update_user_profile(message.from_user.id, {'full_name': full_name})
    await message.answer(
        f"‚úÖ –§–ò–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {full_name}",
        reply_markup=get_main_menu()
    )
    await state.clear()


@router.message(EditProfile.waiting_for_phone)
async def edit_phone(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()
    
    if not re.match(r'^[\d\s\+\-\(\)]+$', phone):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return
    
    await update_user_profile(message.from_user.id, {'phone': phone})
    await message.answer(
        f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω: {phone}",
        reply_markup=get_main_menu()
    )
    await state.clear()


@router.message(EditProfile.waiting_for_birthdate)
async def edit_birthdate(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    birthdate = parse_birthdate_flexible(message.text)
    
    if not birthdate:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É")
        return
    
    await update_user_profile(message.from_user.id, {
        'birthdate': birthdate.strftime('%Y-%m-%d')
    })
    
    age = calculate_age(birthdate)
    await message.answer(
        f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç",
        reply_markup=get_main_menu()
    )
    await state.clear()


@router.callback_query(EditProfile.waiting_for_gender, F.data.startswith("gender_"))
async def edit_gender(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–∞"""
    gender = callback.data.split("_")[1]
    
    await update_user_profile(callback.from_user.id, {'gender': gender})
    
    gender_text = "–ú—É–∂—Å–∫–æ–π" if gender == "male" else "–ñ–µ–Ω—Å–∫–∏–π"
    await callback.message.edit_text(f"‚úÖ –ü–æ–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {gender_text}")
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu())
    await state.clear()
    await callback.answer()


@router.message(EditProfile.waiting_for_height)
async def edit_height(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Ç–∞"""
    try:
        height = int(message.text.strip())
        if 50 <= height <= 250:
            await update_user_profile(message.from_user.id, {'height': height})
            await message.answer(
                f"‚úÖ –†–æ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {height} —Å–º",
                reply_markup=get_main_menu()
            )
            await state.clear()
        else:
            await message.answer("‚ùå –†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 50 –¥–æ 250 —Å–º")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


@router.message(EditProfile.waiting_for_weight)
async def edit_weight(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Å–∞"""
    try:
        weight = float(message.text.strip().replace(',', '.'))
        if 20 <= weight <= 300:
            await update_user_profile(message.from_user.id, {'weight': weight})
            await message.answer(
                f"‚úÖ –í–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {weight} –∫–≥",
                reply_markup=get_main_menu()
            )
            await state.clear()
        else:
            await message.answer("‚ùå –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 20 –¥–æ 300 –∫–≥")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


@router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø—Ä–æ—Ñ–∏–ª—è"""
    await state.clear()
    profile = await get_user_profile(callback.from_user.id)
    
    age = calculate_age(datetime.fromisoformat(profile.birthdate)) if profile.birthdate else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    gender_text = "–ú—É–∂—Å–∫–æ–π" if profile.gender == "male" else "–ñ–µ–Ω—Å–∫–∏–π"
    
    profile_text = f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
    profile_text += f"–§–ò–û: {profile.full_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    profile_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {profile.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
    profile_text += f"–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n"
    profile_text += f"–ü–æ–ª: {gender_text}\n"
    profile_text += f"–†–æ—Å—Ç: {profile.height or '–Ω–µ —É–∫–∞–∑–∞–Ω'} —Å–º\n"
    profile_text += f"–í–µ—Å: {profile.weight or '–Ω–µ —É–∫–∞–∑–∞–Ω'} –∫–≥\n"
    
    await callback.message.edit_text(
        profile_text,
        reply_markup=get_profile_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu()
    )
    await callback.answer()
