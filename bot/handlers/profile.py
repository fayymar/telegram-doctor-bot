from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from datetime import datetime

from bot.keyboards import main_menu_keyboard, gender_keyboard, skip_keyboard, phone_keyboard
from bot.states import RegistrationStates
from database.connection import db

router = Router()


# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ===

# –≠—Ç–∞–ø 1: –§–ò–û
@router.message(RegistrationStates.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û"""
    if not message.text or len(message.text.strip()) < 2:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):")
        return
    
    full_name = message.text.strip()
    await db.update_user_profile(message.from_user.id, full_name=full_name)
    
    await message.answer(
        f"üë§ –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {full_name.split()[0]}!\n\n"
        "üì± –¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:",
        reply_markup=phone_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_phone)


# –≠—Ç–∞–ø 2: –¢–µ–ª–µ—Ñ–æ–Ω
@router.message(RegistrationStates.waiting_for_phone, F.contact)
async def process_phone_contact(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    phone = message.contact.phone_number
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
    if not phone.startswith('+'):
        phone = '+' + phone
    
    await db.update_user_profile(message.from_user.id, phone=phone)
    
    await message.answer(
        f"üì± –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {phone}\n\n"
        "üìÖ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990</i>",
        reply_markup=skip_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(RegistrationStates.waiting_for_birthdate)


@router.message(RegistrationStates.waiting_for_phone, F.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_phone(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await message.answer(
        "üìÖ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990</i>",
        reply_markup=skip_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(RegistrationStates.waiting_for_birthdate)


@router.message(RegistrationStates.waiting_for_phone)
async def process_phone_text(message: Message, state: FSMContext):
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–µ–∫—Å—Ç–æ–º"""
    if not message.text:
        await message.answer(
            "‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º' –∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
            reply_markup=phone_keyboard()
        )
        return
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    phone = message.text.strip().replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
    
    if len(phone) < 10:
        await message.answer(
            "‚ö†Ô∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=phone_keyboard()
        )
        return
    
    if not phone.startswith('+'):
        phone = '+' + phone
    
    await db.update_user_profile(message.from_user.id, phone=phone)
    
    await message.answer(
        f"üì± –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {phone}\n\n"
        "üìÖ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990</i>",
        reply_markup=skip_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(RegistrationStates.waiting_for_birthdate)


# –≠—Ç–∞–ø 3: –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
@router.message(RegistrationStates.waiting_for_birthdate, F.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_birthdate(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=gender_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_gender)


@router.message(RegistrationStates.waiting_for_birthdate)
async def process_birthdate(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    if not message.text:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
    date_str = message.text.strip()
    
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        for fmt in ['%d.%m.%Y', '%d/%m/%Y', '%d-%m-%Y', '%Y-%m-%d']:
            try:
                birthdate = datetime.strptime(date_str, fmt).date()
                break
            except ValueError:
                continue
        else:
            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å
        today = datetime.now().date()
        age = today.year - birthdate.year - ((today.month, today.day) < (birthdate.month, birthdate.day))
        
        if age < 0 or age > 120:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì):"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        await db.update_user_profile(message.from_user.id, birthdate=birthdate.isoformat())
        
        await message.answer(
            f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {birthdate.strftime('%d.%m.%Y')} (–≤–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç)\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=gender_keyboard()
        )
        await state.set_state(RegistrationStates.waiting_for_gender)
        
    except (ValueError, AttributeError):
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990</i>",
            parse_mode="HTML"
        )


# –≠—Ç–∞–ø 4: –ü–æ–ª
@router.message(RegistrationStates.waiting_for_gender)
async def process_gender(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∞"""
    text = message.text.lower()
    
    if "–º—É–∂—Å–∫–æ–π" in text or "–º—É–∂" in text:
        gender = "male"
    elif "–∂–µ–Ω—Å–∫–∏–π" in text or "–∂–µ–Ω" in text:
        gender = "female"
    else:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏:",
            reply_markup=gender_keyboard()
        )
        return
    
    await db.update_user_profile(message.from_user.id, gender=gender)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175):",
        reply_markup=skip_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_height)


# –≠—Ç–∞–ø 5: –†–æ—Å—Ç
@router.message(RegistrationStates.waiting_for_height, F.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_height(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ —Ä–æ—Å—Ç–∞"""
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70):",
        reply_markup=skip_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_weight)


@router.message(RegistrationStates.waiting_for_height)
async def process_height(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞"""
    try:
        height = int(message.text)
        if height < 50 or height > 250:
            await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç –æ—Ç 50 –¥–æ 250 —Å–º:")
            return
        
        await db.update_user_profile(message.from_user.id, height=height)
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70):",
            reply_markup=skip_keyboard()
        )
        await state.set_state(RegistrationStates.waiting_for_weight)
        
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175)")


# –≠—Ç–∞–ø 6: –í–µ—Å
@router.message(RegistrationStates.waiting_for_weight, F.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_weight(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≤–µ—Å–∞"""
    await state.clear()
    await message.answer(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –æ–ø–∏—Å–∞–≤ —Å–≤–æ–∏ —Å–∏–º–ø—Ç–æ–º—ã.",
        reply_markup=main_menu_keyboard()
    )


@router.message(RegistrationStates.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞"""
    try:
        weight = float(message.text.replace(',', '.'))
        if weight < 20 or weight > 300:
            await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –æ—Ç 20 –¥–æ 300 –∫–≥:")
            return
        
        await db.update_user_profile(message.from_user.id, weight=weight)
        await state.clear()
        await message.answer(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –æ–ø–∏—Å–∞–≤ —Å–≤–æ–∏ —Å–∏–º–ø—Ç–æ–º—ã.",
            reply_markup=main_menu_keyboard()
        )
        
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70 –∏–ª–∏ 65.5)")


# === –ü–†–û–°–ú–û–¢–† –ü–†–û–§–ò–õ–Ø ===

@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def view_profile(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è"""
    profile = await db.get_user_profile(message.from_user.id)
    
    if not profile:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    gender_map = {
        "male": "–ú—É–∂—Å–∫–æ–π",
        "female": "–ñ–µ–Ω—Å–∫–∏–π"
    }
    
    profile_text = "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
    
    if profile.get("full_name"):
        profile_text += f"üìù –§–ò–û: {profile['full_name']}\n"
    if profile.get("phone"):
        profile_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {profile['phone']}\n"
    if profile.get("birthdate"):
        try:
            birthdate = datetime.fromisoformat(profile['birthdate']).date()
            today = datetime.now().date()
            age = today.year - birthdate.year - ((today.month, today.day) < (birthdate.month, birthdate.day))
            profile_text += f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate.strftime('%d.%m.%Y')} ({age} –ª–µ—Ç)\n"
        except:
            profile_text += f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {profile['birthdate']}\n"
    if profile.get("gender"):
        profile_text += f"‚öß –ü–æ–ª: {gender_map.get(profile['gender'], '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    if profile.get("height"):
        profile_text += f"üìè –†–æ—Å—Ç: {profile['height']} —Å–º\n"
    if profile.get("weight"):
        profile_text += f"‚öñÔ∏è –í–µ—Å: {profile['weight']} –∫–≥\n"
    
    profile_text += "\n<i>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start</i>"
    
    await message.answer(profile_text, parse_mode="HTML")
