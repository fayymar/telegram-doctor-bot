from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.states import Consultation
from bot.keyboards import (
    get_main_menu,
    get_symptoms_confirmation,
    get_duration_keyboard,
    get_additional_symptoms_keyboard,
    update_symptom_selection,
    get_final_confirmation,
    get_result_keyboard
)
from services.ai_service import AIService
from database.connection import supabase_client


router = Router()
ai_service = AIService()


# ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ============

async def get_user_profile(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è AI"""
    try:
        response = supabase_client.table('user_profiles').select('*').eq('user_id', user_id).execute()
        if response.data:
            profile = response.data[0]
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
            if profile.get('birthdate'):
                birthdate = datetime.fromisoformat(profile['birthdate'])
                age = (datetime.now() - birthdate).days // 365
            else:
                age = None
            
            return {
                'gender': profile.get('gender'),
                'age': age,
                'height': profile.get('height'),
                'weight': profile.get('weight')
            }
    except Exception as e:
        print(f"DB Error: {e}")
    
    return {'gender': None, 'age': None, 'height': None, 'weight': None}


async def save_consultation(user_id: int, data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –ë–î"""
    try:
        import json
        
        consultation_data = {
            'user_id': user_id,
            'symptoms': json.dumps(data.get('symptoms', {}), ensure_ascii=False),
            'questions_answers': json.dumps(data.get('questions_answers', {}), ensure_ascii=False),
            'recommended_doctor': data.get('specialist'),
            'urgency_level': data.get('urgency'),
            'created_at': datetime.now().isoformat()
        }
        
        supabase_client.table('consultations').insert(consultation_data).execute()
    except Exception as e:
        print(f"DB Error: {e}")


# ============ –ù–ê–ß–ê–õ–û –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò ============

@router.message(F.text == "ü©∫ –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
async def start_consultation(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    try:
        response = supabase_client.table('user_profiles').select('user_id').eq('user_id', message.from_user.id).execute()
        if not response.data:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
            return
    except Exception as e:
        print(f"DB Error: {e}")
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    await state.clear()
    
    await message.answer(
        "ü©∫ *–ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è*\n\n"
        "üìù *–≠—Ç–∞–ø 1 –∏–∑ 4*\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ.\n"
        "–ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç? –ö–∞–∫–∏–µ –æ—â—É—â–µ–Ω–∏—è?\n\n"
        "üí° –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
        parse_mode="Markdown"
    )
    
    await state.set_state(Consultation.waiting_for_symptoms)


# ============ –≠–¢–ê–ü 1: –û–ü–ò–°–ê–ù–ò–ï –°–ò–ú–ü–¢–û–ú–û–í ============

@router.message(Consultation.waiting_for_symptoms, F.text)
async def process_symptoms_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å–∏–º–ø—Ç–æ–º–æ–≤"""
    
    symptoms_text = message.text.strip()
    
    # –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–∏–º–ø—Ç–æ–º—ã
    await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    validation = ai_service.validate_symptoms(symptoms_text)
    
    if not validation['is_valid']:
        await message.answer(
            f"‚ùå *–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏*\n\n"
            f"{validation['reason']}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –∏–º–µ–Ω–Ω–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã:\n"
            f"‚Ä¢ –ë–æ–ª–∏ –∏ –∏—Ö –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è\n"
            f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞\n"
            f"‚Ä¢ –¢–æ—à–Ω–æ—Ç–∞, —Å–ª–∞–±–æ—Å—Ç—å\n"
            f"‚Ä¢ –î—Ä—É–≥–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –æ—â—É—â–µ–Ω–∏—è\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
            parse_mode="Markdown"
        )
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã –æ—Ç AI
    clean_symptoms = validation['symptoms'] if validation['symptoms'] else symptoms_text
    
    await state.update_data(main_symptoms=clean_symptoms)
    
    await message.answer(
        f"üìù *–í–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã:*\n\n"
        f"{clean_symptoms}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏:",
        reply_markup=get_symptoms_confirmation(),
        parse_mode="Markdown"
    )
    
    await state.set_state(Consultation.confirming_symptoms)


@router.message(Consultation.waiting_for_symptoms, F.voice)
async def process_symptoms_voice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await message.answer(
        "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã —Ç–µ–∫—Å—Ç–æ–º."
    )


# ============ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –°–ò–ú–ü–¢–û–ú–û–í ============

@router.callback_query(Consultation.confirming_symptoms, F.data == "confirm_symptoms")
async def confirm_symptoms(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–æ–≤"""
    await callback.message.edit_text(
        "‚úÖ –°–∏–º–ø—Ç–æ–º—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã"
    )
    
    await callback.message.answer(
        "üìÖ *–≠—Ç–∞–ø 2 –∏–∑ 4*\n\n"
        "–ö–∞–∫ –¥–∞–≤–Ω–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ—è—Ç —ç—Ç–∏ —Å–∏–º–ø—Ç–æ–º—ã?",
        reply_markup=get_duration_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(Consultation.waiting_for_duration)
    await callback.answer()


@router.callback_query(Consultation.confirming_symptoms, F.data == "add_symptoms")
async def add_more_symptoms(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π"""
    await callback.message.edit_text(
        "üìù –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∫ –æ–ø–∏—Å–∞–Ω–∏—é —Å–∏–º–ø—Ç–æ–º–æ–≤:"
    )
    
    await state.set_state(Consultation.waiting_for_symptoms)
    await callback.answer()


@router.callback_query(Consultation.confirming_symptoms, F.data == "restart_symptoms")
async def restart_symptoms(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ"""
    await callback.message.edit_text(
        "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã:"
    )
    
    await state.set_state(Consultation.waiting_for_symptoms)
    await callback.answer()


# ============ –≠–¢–ê–ü 2: –î–ê–í–ù–û–°–¢–¨ –°–ò–ú–ü–¢–û–ú–û–í ============

@router.callback_query(Consultation.waiting_for_duration, F.data.startswith("duration_"))
async def process_duration(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞–≤–Ω–æ—Å—Ç–∏"""
    duration_map = {
        "24h": "–ú–µ–Ω—å—à–µ 24 —á–∞—Å–æ–≤",
        "1-3d": "1-3 –¥–Ω—è",
        "3-7d": "3-7 –¥–Ω–µ–π",
        "week+": "–ë–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏"
    }
    
    duration_key = callback.data.split("_")[1]
    duration_text = duration_map.get(duration_key, "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    
    await state.update_data(duration=duration_text)
    
    await callback.message.edit_text(
        f"üìÖ –î–∞–≤–Ω–æ—Å—Ç—å: {duration_text}"
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã —á–µ—Ä–µ–∑ AI
    await callback.message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏–º–ø—Ç–æ–º—ã...")
    
    data = await state.get_data()
    main_symptoms = data.get('main_symptoms', '')
    
    additional_symptoms = ai_service.generate_additional_symptoms(
        main_symptoms=main_symptoms,
        duration=duration_text
    )
    
    if not additional_symptoms:
        # –ï—Å–ª–∏ AI –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—É
        await callback.message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —ç—Ç–∞–ø—É..."
        )
        await show_final_confirmation(callback.message, state)
        await callback.answer()
        return
    
    await state.update_data(
        additional_symptoms_options=additional_symptoms,
        selected_additional=set()
    )
    
    await callback.message.answer(
        "üìã *–≠—Ç–∞–ø 3 –∏–∑ 4*\n\n"
        "–û—Ç–º–µ—Ç—å—Ç–µ, —á—Ç–æ –µ—â—ë –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç:\n"
        "(–≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)",
        reply_markup=get_additional_symptoms_keyboard(additional_symptoms),
        parse_mode="Markdown"
    )
    
    await state.set_state(Consultation.selecting_additional_symptoms)
    await callback.answer()


# ============ –≠–¢–ê–ü 3: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–ò–ú–ü–¢–û–ú–´ ============

@router.callback_query(Consultation.selecting_additional_symptoms, F.data.startswith("symptom_"))
async def toggle_symptom(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–∏–º–ø—Ç–æ–º–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    symptom = callback.data.replace("symptom_", "")
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –æ–ø—Ü–∏–π
    data = await state.get_data()
    options = data.get('additional_symptoms_options', [])
    selected = data.get('selected_additional', set())
    
    # –ò—â–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    full_symptom = None
    for opt in options:
        if opt.startswith(symptom) or symptom in opt:
            full_symptom = opt
            break
    
    if not full_symptom:
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞")
        return
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä
    if full_symptom in selected:
        selected.remove(full_symptom)
    else:
        selected.add(full_symptom)
    
    await state.update_data(selected_additional=selected)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    updated_keyboard = update_symptom_selection(
        callback.message.reply_markup,
        selected
    )
    
    await callback.message.edit_reply_markup(reply_markup=updated_keyboard)
    await callback.answer()


@router.callback_query(Consultation.selecting_additional_symptoms, F.data == "no_additional")
async def no_additional_symptoms(callback: CallbackQuery, state: FSMContext):
    """–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤"""
    await state.update_data(selected_additional=set())
    
    await callback.message.edit_text(
        "‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ –Ω–µ—Ç"
    )
    
    await show_final_confirmation(callback.message, state)
    await callback.answer()


@router.callback_query(Consultation.selecting_additional_symptoms, F.data == "other_symptom")
async def other_symptom(callback: CallbackQuery, state: FSMContext):
    """–û–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–∏–º–ø—Ç–æ–º"""
    await callback.message.edit_text(
        "‚úèÔ∏è –û–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–º–ø—Ç–æ–º:"
    )
    
    await state.set_state(Consultation.waiting_for_other_symptoms)
    await callback.answer()


@router.message(Consultation.waiting_for_other_symptoms)
async def process_other_symptom(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–æ–≥–æ —Å–∏–º–ø—Ç–æ–º–∞"""
    other_symptom = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    validation = ai_service.validate_symptoms(other_symptom)
    
    if not validation['is_valid']:
        await message.answer(
            f"‚ùå {validation['reason']}\n\n"
            "–û–ø–∏—à–∏—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Å–∏–º–ø—Ç–æ–º:"
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
    data = await state.get_data()
    selected = data.get('selected_additional', set())
    selected.add(validation['symptoms'] if validation['symptoms'] else other_symptom)
    
    await state.update_data(selected_additional=selected)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É
    options = data.get('additional_symptoms_options', [])
    
    await message.answer(
        "‚úÖ –°–∏–º–ø—Ç–æ–º –¥–æ–±–∞–≤–ª–µ–Ω\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ':",
        reply_markup=get_additional_symptoms_keyboard(options)
    )
    
    await state.set_state(Consultation.selecting_additional_symptoms)


@router.callback_query(Consultation.selecting_additional_symptoms, F.data == "done_additional")
async def done_additional_symptoms(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤"""
    data = await state.get_data()
    selected = data.get('selected_additional', set())
    
    if selected:
        symptoms_list = "\n".join([f"‚Ä¢ {s}" for s in selected])
        await callback.message.edit_text(
            f"‚úÖ *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã:*\n\n{symptoms_list}",
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
    
    await show_final_confirmation(callback.message, state)
    await callback.answer()


# ============ –≠–¢–ê–ü 4: –§–ò–ù–ê–õ–¨–ù–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï ============

async def show_final_confirmation(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–º–Ω–µ–∑–æ–º"""
    data = await state.get_data()
    
    main_symptoms = data.get('main_symptoms', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
    duration = data.get('duration', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
    additional = data.get('selected_additional', set())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∞–º–Ω–µ–∑–∞
    anamnesis = f"üìã *–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ*\n\n"
    anamnesis += f"*–û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã:*\n{main_symptoms}\n\n"
    anamnesis += f"*–î–∞–≤–Ω–æ—Å—Ç—å:* {duration}\n\n"
    
    if additional:
        anamnesis += "*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã:*\n"
        for symptom in additional:
            anamnesis += f"‚Ä¢ {symptom}\n"
    else:
        anamnesis += "*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã:* –Ω–µ—Ç\n"
    
    anamnesis += "\n‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ?"
    
    await message.answer(
        anamnesis,
        reply_markup=get_final_confirmation(),
        parse_mode="Markdown"
    )
    
    await state.set_state(Consultation.final_confirmation)


@router.callback_query(Consultation.final_confirmation, F.data == "final_confirm")
async def final_confirm(callback: CallbackQuery, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    await callback.message.edit_text("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")
    
    await callback.message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏–º–ø—Ç–æ–º—ã –∏ –ø–æ–¥–±–∏—Ä–∞—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    user_profile = await get_user_profile(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ç AI
    recommendation = ai_service.recommend_doctor(
        main_symptoms=data.get('main_symptoms', ''),
        duration=data.get('duration', ''),
        additional_symptoms=list(data.get('selected_additional', set())),
        user_profile=user_profile
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    await save_consultation(callback.from_user.id, {
        'symptoms': {
            'main': data.get('main_symptoms'),
            'duration': data.get('duration'),
            'additional': list(data.get('selected_additional', set()))
        },
        'questions_answers': {},
        'specialist': recommendation['specialist'],
        'urgency': recommendation['urgency']
    })
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    urgency_emoji = {
        'emergency': 'üö®',
        'high': '‚ö†Ô∏è',
        'medium': 'üìã',
        'low': '‚ÑπÔ∏è'
    }
    
    urgency_text = {
        'emergency': '–°–†–û–ß–ù–û! –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å',
        'high': '–í—ã—Å–æ–∫–∞—è (–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤)',
        'medium': '–°—Ä–µ–¥–Ω—è—è (–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏)',
        'low': '–ù–∏–∑–∫–∞—è (–ø–ª–∞–Ω–æ–≤—ã–π –ø—Ä–∏—ë–º)'
    }
    
    result_text = f"ü©∫ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞*\n\n"
    result_text += f"*–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {recommendation['specialist']}\n\n"
    result_text += f"{urgency_emoji.get(recommendation['urgency'], 'üìã')} *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* "
    result_text += f"{urgency_text.get(recommendation['urgency'], '–°—Ä–µ–¥–Ω—è—è')}\n\n"
    result_text += f"*–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:*\n{recommendation['reasoning']}"
    
    await callback.message.answer(
        result_text,
        reply_markup=get_result_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.clear()
    await callback.answer()


@router.callback_query(Consultation.final_confirmation, F.data == "add_more_symptoms")
async def add_more_from_final(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–∏–º–ø—Ç–æ–º—ã —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —ç—Ç–∞–ø–∞"""
    await callback.message.edit_text("‚úèÔ∏è –û–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã:")
    
    await state.set_state(Consultation.waiting_for_other_symptoms)
    await callback.answer()


@router.callback_query(Consultation.final_confirmation, F.data == "restart_consultation")
async def restart_consultation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ"""
    await callback.message.delete()
    await state.clear()
    
    fake_message = callback.message
    fake_message.text = "ü©∫ –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
    
    await start_consultation(fake_message, state)
    await callback.answer()


# ============ –î–ï–ô–°–¢–í–ò–Ø –ü–û–°–õ–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê ============

@router.callback_query(F.data == "new_consultation")
async def new_consultation_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    await callback.message.delete()
    await state.clear()
    
    fake_message = callback.message
    fake_message.text = "ü©∫ –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
    
    await start_consultation(fake_message, state)
    await callback.answer()


@router.callback_query(F.data == "book_appointment")
async def book_appointment(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É"""
    await callback.answer(
        "üìù –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        show_alert=True
    )


# ============ –û–¢–ú–ï–ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò ============

@router.callback_query(F.data == "cancel_consultation")
async def cancel_consultation_callback(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    await state.clear()
    await callback.message.edit_text("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu()
    )
    await callback.answer()


@router.message(F.text == "/cancel")
async def cancel_consultation_command(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    await state.clear()
    await message.answer(
        "‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_main_menu()
    )
