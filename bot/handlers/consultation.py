from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.keyboards import main_menu_keyboard, cancel_keyboard, consultation_result_keyboard
from bot.states import ConsultationStates
from database.connection import db
from services.ai_service import ai_service

router = Router()


@router.message(F.text == "ü©∫ –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
@router.callback_query(F.data == "new_consultation")
async def start_consultation(event: Message | CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    else:
        message = event
    
    user_id = message.chat.id if isinstance(event, CallbackQuery) else event.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile = await db.get_user_profile(user_id)
    if not profile:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    await state.update_data(
        symptoms=[],
        qa_history=[],
        current_question=None
    )
    
    await message.answer(
        "ü©∫ <b>–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–ø—Ç–æ–º–æ–≤ —Å—Ä–∞–∑—É.\n\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: \"–±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞ –∏ —Ç–æ—à–Ω–∏—Ç\" –∏–ª–∏ \"—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 38 –∏ –∫–∞—à–µ–ª—å\"</i>",
        reply_markup=cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(ConsultationStates.waiting_for_symptoms)


@router.message(ConsultationStates.waiting_for_symptoms)
async def process_symptoms(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç (–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
    if message.text:
        symptoms_text = message.text
    elif message.voice:
        await message.answer("üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã —Ç–µ–∫—Å—Ç–æ–º.")
        return
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–º–ø—Ç–æ–º—ã
    data = await state.get_data()
    symptoms = data.get("symptoms", [])
    symptoms.append(symptoms_text)
    await state.update_data(symptoms=symptoms)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑ AI
    await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã...")
    
    profile = await db.get_user_profile(message.from_user.id)
    qa_history = data.get("qa_history", [])
    
    result = await ai_service.analyze_symptoms(
        symptoms=symptoms,
        qa_history=qa_history,
        user_profile=profile
    )
    
    if result["action"] == "ask_question":
        # AI —Ö–æ—á–µ—Ç –∑–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await state.update_data(current_question=result["question"])
        await message.answer(
            f"‚ùì <b>–£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å:</b>\n\n{result['question']}",
            reply_markup=cancel_keyboard(),
            parse_mode="HTML"
        )
        await state.set_state(ConsultationStates.waiting_for_answer)
        
    elif result["action"] == "recommend_doctor":
        # AI –≥–æ—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –≤—Ä–∞—á–∞
        await show_recommendation(message, state, result, profile)


@router.message(ConsultationStates.waiting_for_answer)
async def process_answer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å"""
    if not message.text:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")
        return
    
    data = await state.get_data()
    qa_history = data.get("qa_history", [])
    current_question = data.get("current_question")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
    qa_history.append({
        "question": current_question,
        "answer": message.text
    })
    await state.update_data(qa_history=qa_history)
    
    # –°–Ω–æ–≤–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    await message.answer("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—Ç–≤–µ—Ç...")
    
    profile = await db.get_user_profile(message.from_user.id)
    symptoms = data.get("symptoms", [])
    
    result = await ai_service.analyze_symptoms(
        symptoms=symptoms,
        qa_history=qa_history,
        user_profile=profile
    )
    
    if result["action"] == "ask_question":
        # –ï—â—ë –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å
        await state.update_data(current_question=result["question"])
        await message.answer(
            f"‚ùì <b>–£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å:</b>\n\n{result['question']}",
            reply_markup=cancel_keyboard(),
            parse_mode="HTML"
        )
        # –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        
    elif result["action"] == "recommend_doctor":
        # –ì–æ—Ç–æ–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        await show_recommendation(message, state, result, profile)


async def show_recommendation(message: Message, state: FSMContext, result: dict, profile: dict):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤—Ä–∞—á–∞"""
    data = await state.get_data()
    symptoms = data.get("symptoms", [])
    qa_history = data.get("qa_history", [])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –ë–î
    await db.create_consultation(
        user_id=message.from_user.id,
        symptoms=symptoms,
        questions_answers=qa_history,
        recommended_doctor=result["doctor"],
        urgency_level=result["urgency"]
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π
    urgency_emoji = {
        "low": "üü¢",
        "medium": "üü°",
        "high": "üü†",
        "emergency": "üî¥"
    }
    
    urgency_text = {
        "low": "–ù–∏–∑–∫–∞—è - –ø–ª–∞–Ω–æ–≤—ã–π –≤–∏–∑–∏—Ç",
        "medium": "–°—Ä–µ–¥–Ω—è—è - –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
        "high": "–í—ã—Å–æ–∫–∞—è - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ",
        "emergency": "–≠–ö–°–¢–†–ï–ù–ù–ê–Ø - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–∑–æ–≤–∏—Ç–µ —Å–∫–æ—Ä—É—é –ø–æ–º–æ—â—å!"
    }
    
    recommendation_text = f"""
‚úÖ <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω</b>

üë®‚Äç‚öïÔ∏è <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:</b>
{result['doctor']}

{urgency_emoji.get(result['urgency'], '‚ö™')} <b>–°—Ä–æ—á–Ω–æ—Å—Ç—å:</b>
{urgency_text.get(result['urgency'], '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}

üí° <b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b>
{result['reasoning']}

<b>‚ö†Ô∏è –í–ê–ñ–ù–û:</b>
–≠—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤. –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑ –º–æ–∂–µ—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤—Ä–∞—á –ø–æ—Å–ª–µ –æ—Å–º–æ—Ç—Ä–∞.
"""
    
    await message.answer(
        recommendation_text,
        reply_markup=consultation_result_keyboard(),
        parse_mode="HTML"
    )
    
    await state.clear()


# === –ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π ===

@router.message(F.text == "üìã –ú–æ–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")
@router.callback_query(F.data == "view_history")
async def view_consultations(event: Message | CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
    if isinstance(event, CallbackQuery):
        message = event.message
        user_id = message.chat.id
        await event.answer()
    else:
        message = event
        user_id = event.from_user.id
    
    consultations = await db.get_user_consultations(user_id, limit=10)
    
    if not consultations:
        await message.answer(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.\n\n"
            "–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤—Ä–∞—á–∞.",
            reply_markup=main_menu_keyboard()
        )
        return
    
    history_text = "üìã <b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:</b>\n\n"
    
    for i, cons in enumerate(consultations[:5], 1):
        import json
        from datetime import datetime
        
        symptoms = json.loads(cons["symptoms"])
        created_at = datetime.fromisoformat(cons["created_at"])
        
        urgency_emoji = {
            "low": "üü¢",
            "medium": "üü°",
            "high": "üü†",
            "emergency": "üî¥"
        }
        
        history_text += f"{i}. <b>{cons['recommended_doctor']}</b> {urgency_emoji.get(cons['urgency_level'], '‚ö™')}\n"
        history_text += f"   –°–∏–º–ø—Ç–æ–º—ã: {symptoms[0][:50]}...\n"
        history_text += f"   –î–∞—Ç–∞: {created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    
    await message.answer(history_text, parse_mode="HTML", reply_markup=main_menu_keyboard())
