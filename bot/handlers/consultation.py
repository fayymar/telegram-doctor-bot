from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.keyboards import (
    main_menu_keyboard, cancel_keyboard, confirm_symptoms_keyboard,
    duration_keyboard, additional_symptoms_keyboard, final_confirmation_keyboard,
    consultation_result_keyboard
)
from bot.states import ConsultationStates
from database.connection import db
from services.ai_service import ai_service

router = Router()


# === –ù–ê–ß–ê–õ–û –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò ===

@router.message(F.text == "ü©∫ –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
@router.callback_query(F.data == "new_consultation")
async def start_consultation(event: Message | CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
        user_id = message.chat.id
    else:
        message = event
        user_id = event.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile = await db.get_user_profile(user_id)
    if not profile:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    await state.set_data({
        "initial_symptoms": [],
        "duration": None,
        "additional_symptoms": [],
        "ai_suggested_symptoms": []
    })
    
    await message.answer(
        "ü©∫ <b>–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–ø—Ç–æ–º–æ–≤ —Å—Ä–∞–∑—É.\n\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: \"–±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞ –∏ —Ç–æ—à–Ω–∏—Ç\" –∏–ª–∏ \"—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 38 –∏ –∫–∞—à–µ–ª—å\"</i>",
        reply_markup=cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(ConsultationStates.waiting_for_symptoms)


# === –≠–¢–ê–ü 1: –û–ü–ò–°–ê–ù–ò–ï –°–ò–ú–ü–¢–û–ú–û–í ===

@router.message(ConsultationStates.waiting_for_symptoms)
async def process_symptoms(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
    if message.text:
        symptoms_text = message.text
    elif message.voice:
        # TODO: –í –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞
        await message.answer("üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã —Ç–µ–∫—Å—Ç–æ–º.")
        return
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        return
    
    # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–æ–≤ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
    symptoms_list = [s.strip() for s in symptoms_text.replace(',', ' –∏ ').split(' –∏ ')]
    symptoms_list = [s for s in symptoms_list if s]  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    data = await state.get_data()
    data["initial_symptoms"] = symptoms_list
    await state.update_data(data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    symptoms_formatted = "\n‚Ä¢ ".join(symptoms_list)
    await message.answer(
        f"üìù <b>–í—ã —É–∫–∞–∑–∞–ª–∏:</b>\n\n‚Ä¢ {symptoms_formatted}\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=confirm_symptoms_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(ConsultationStates.confirming_symptoms)


@router.message(ConsultationStates.confirming_symptoms, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def confirm_symptoms(message: Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–æ–≤ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥–∞–≤–Ω–æ—Å—Ç–∏"""
    await message.answer(
        "‚è±Ô∏è <b>–ö–∞–∫ –¥–∞–≤–Ω–æ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è —Å–∏–º–ø—Ç–æ–º–∞—Ç–∏–∫–∞?</b>",
        reply_markup=duration_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(ConsultationStates.selecting_duration)


@router.message(ConsultationStates.confirming_symptoms, F.text == "‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å")
async def add_more_symptoms(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–∏–º–ø—Ç–æ–º—ã"""
    await message.answer(
        "‚úèÔ∏è –û–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã:",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(ConsultationStates.adding_symptoms)


@router.message(ConsultationStates.adding_symptoms)
async def process_additional_initial_symptoms(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤"""
    if not message.text:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã —Ç–µ–∫—Å—Ç–æ–º.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∏–º–ø—Ç–æ–º—ã
    data = await state.get_data()
    existing_symptoms = data.get("initial_symptoms", [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
    new_symptoms = [s.strip() for s in message.text.replace(',', ' –∏ ').split(' –∏ ')]
    new_symptoms = [s for s in new_symptoms if s]
    
    all_symptoms = existing_symptoms + new_symptoms
    data["initial_symptoms"] = all_symptoms
    await state.update_data(data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    symptoms_formatted = "\n‚Ä¢ ".join(all_symptoms)
    await message.answer(
        f"üìù <b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:</b>\n\n‚Ä¢ {symptoms_formatted}\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=confirm_symptoms_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(ConsultationStates.confirming_symptoms)


@router.message(ConsultationStates.confirming_symptoms, F.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
async def restart_from_symptoms(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –≤–≤–æ–¥–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤"""
    await state.update_data(initial_symptoms=[])
    await message.answer(
        "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã:",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(ConsultationStates.waiting_for_symptoms)


# === –≠–¢–ê–ü 2: –î–ê–í–ù–û–°–¢–¨ –°–ò–ú–ü–¢–û–ú–û–í ===

@router.message(ConsultationStates.selecting_duration, F.text.in_([
    "‚è±Ô∏è –ú–µ–Ω—å—à–µ 24 —á–∞—Å–æ–≤",
    "üìÖ 1-3 –¥–Ω—è",
    "üìÖ 3-6 –¥–Ω–µ–π",
    "üìÖ –ë–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏"
]))
async def process_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞–≤–Ω–æ—Å—Ç–∏"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–∞–≤–Ω–æ—Å—Ç–∏
    duration_map = {
        "‚è±Ô∏è –ú–µ–Ω—å—à–µ 24 —á–∞—Å–æ–≤": "–ú–µ–Ω—å—à–µ 24 —á–∞—Å–æ–≤",
        "üìÖ 1-3 –¥–Ω—è": "1-3 –¥–Ω—è",
        "üìÖ 3-6 –¥–Ω–µ–π": "3-6 –¥–Ω–µ–π",
        "üìÖ –ë–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏": "–ë–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏"
    }
    duration = duration_map.get(message.text, message.text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    await state.update_data(duration=duration)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã —á–µ—Ä–µ–∑ AI
    await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã –∏ –ø–æ–¥–±–∏—Ä–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...", reply_markup=main_menu_keyboard())
    
    data = await state.get_data()
    profile = await db.get_user_profile(message.from_user.id)
    
    suggested_symptoms = await ai_service.generate_additional_symptoms(
        initial_symptoms=data["initial_symptoms"],
        duration=duration,
        user_profile=profile
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã
    await state.update_data(ai_suggested_symptoms=suggested_symptoms)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–∏–º–ø—Ç–æ–º–∞–º–∏
    await message.answer(
        "‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å):</b>\n\n"
        "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ —Å–∏–º–ø—Ç–æ–º—ã –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å. "
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ - –Ω–∞–∂–º–∏—Ç–µ <b>‚úÖ –ì–æ—Ç–æ–≤–æ</b>",
        reply_markup=additional_symptoms_keyboard(suggested_symptoms, []),
        parse_mode="HTML"
    )
    await state.set_state(ConsultationStates.selecting_additional_symptoms)


@router.message(ConsultationStates.selecting_duration, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_symptoms_confirmation(message: Message, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —Å–∏–º–ø—Ç–æ–º–æ–≤"""
    data = await state.get_data()
    symptoms = data.get("initial_symptoms", [])
    symptoms_formatted = "\n‚Ä¢ ".join(symptoms)
    
    await message.answer(
        f"üìù <b>–í—ã —É–∫–∞–∑–∞–ª–∏:</b>\n\n‚Ä¢ {symptoms_formatted}\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=confirm_symptoms_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(ConsultationStates.confirming_symptoms)


# === –≠–¢–ê–ü 3: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–ò–ú–ü–¢–û–ú–´ ===

@router.callback_query(F.data.startswith("toggle_symptom:"))
async def toggle_symptom(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–∏–º–ø—Ç–æ–º–∞"""
    symptom = callback.data.split(":", 1)[1]
    
    data = await state.get_data()
    selected = data.get("additional_symptoms", [])
    suggested = data.get("ai_suggested_symptoms", [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–±–∏—Ä–∞–µ–º
    if symptom in selected:
        selected.remove(symptom)
    else:
        selected.append(symptom)
    
    await state.update_data(additional_symptoms=selected)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(
        reply_markup=additional_symptoms_keyboard(suggested, selected)
    )
    await callback.answer()


@router.callback_query(F.data == "no_additional_symptoms")
async def no_additional_symptoms(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ù–∏—á–µ–≥–æ –∏–∑ —ç—Ç–æ–≥–æ" """
    await state.update_data(additional_symptoms=[])
    await callback.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ –Ω–µ—Ç")
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await show_final_confirmation(callback.message, state)


@router.callback_query(F.data == "custom_symptoms")
async def enter_custom_symptoms(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ —Å–≤–æ–∏—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤"""
    await callback.message.answer(
        "‚úèÔ∏è –û–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã —Ç–µ–∫—Å—Ç–æ–º:",
        reply_markup=cancel_keyboard()
    )
    await callback.answer()
    await state.set_state(ConsultationStates.entering_custom_symptoms)


@router.message(ConsultationStates.entering_custom_symptoms)
async def process_custom_symptoms(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–∏—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤"""
    if not message.text:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã —Ç–µ–∫—Å—Ç–æ–º.")
        return
    
    # –ü–∞—Ä—Å–∏–º —Å–∏–º–ø—Ç–æ–º—ã
    custom = [s.strip() for s in message.text.replace(',', ' –∏ ').split(' –∏ ')]
    custom = [s for s in custom if s]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
    data = await state.get_data()
    selected = data.get("additional_symptoms", [])
    all_additional = selected + custom
    
    await state.update_data(additional_symptoms=all_additional)
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await show_final_confirmation(message, state)


@router.callback_query(F.data == "additional_symptoms_done")
async def finish_additional_symptoms(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤"""
    await callback.answer()
    await show_final_confirmation(callback.message, state)


@router.callback_query(F.data == "back_to_duration")
async def back_to_duration_selection(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞–≤–Ω–æ—Å—Ç–∏"""
    await callback.message.answer(
        "‚è±Ô∏è <b>–ö–∞–∫ –¥–∞–≤–Ω–æ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è —Å–∏–º–ø—Ç–æ–º–∞—Ç–∏–∫–∞?</b>",
        reply_markup=duration_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()
    await state.set_state(ConsultationStates.selecting_duration)


# === –≠–¢–ê–ü 4: –§–ò–ù–ê–õ–¨–ù–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï ===

async def show_final_confirmation(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º"""
    data = await state.get_data()
    
    initial_symptoms = data.get("initial_symptoms", [])
    duration = data.get("duration", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    additional_symptoms = data.get("additional_symptoms", [])
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–Ω–∞–º–Ω–µ–∑
    anamnesis = f"""üìã <b>–ò—Ç–æ–≥–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã:</b>
‚Ä¢ {chr(10).join(['‚Ä¢ ' + s for s in initial_symptoms])}

<b>–î–∞–≤–Ω–æ—Å—Ç—å:</b> {duration}

<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã:</b>
{chr(10).join(['‚Ä¢ ' + s for s in additional_symptoms]) if additional_symptoms else '‚Ä¢ –ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤'}

–í—Å—ë –≤–µ—Ä–Ω–æ? –ú–æ–∂–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—Ä–∞—á–∞."""
    
    await message.answer(
        anamnesis,
        reply_markup=final_confirmation_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(ConsultationStates.final_confirmation)


@router.message(ConsultationStates.final_confirmation, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def final_confirm_and_analyze(message: Message, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"""
    await message.answer("üîç –§–æ—Ä–º–∏—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞...", reply_markup=main_menu_keyboard())
    
    data = await state.get_data()
    profile = await db.get_user_profile(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ç AI
    result = await ai_service.recommend_doctor(
        initial_symptoms=data["initial_symptoms"],
        duration=data["duration"],
        additional_symptoms=data["additional_symptoms"],
        user_profile=profile
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await db.create_consultation(
        user_id=message.from_user.id,
        symptoms=data["initial_symptoms"] + data["additional_symptoms"],
        questions_answers=[{"duration": data["duration"]}],
        recommended_doctor=result["doctor"],
        urgency_level=result["urgency"]
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    urgency_emoji = {
        "low": "üü¢",
        "medium": "üü°",
        "high": "üü†",
        "emergency": "üî¥"
    }
    
    urgency_text = {
        "low": "–ù–∏–∑–∫–∞—è - –ø–ª–∞–Ω–æ–≤—ã–π –≤–∏–∑–∏—Ç",
        "medium": "–°—Ä–µ–¥–Ω—è—è - –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
        "high": "–í—ã—Å–æ–∫–∞—è - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ",
        "emergency": "–≠–ö–°–¢–†–ï–ù–ù–ê–Ø - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–∑–æ–≤–∏—Ç–µ —Å–∫–æ—Ä—É—é –ø–æ–º–æ—â—å!"
    }
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–Ω–∞–º–Ω–µ–∑ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    all_symptoms = data["initial_symptoms"] + data["additional_symptoms"]
    
    recommendation_text = f"""‚úÖ <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω</b>

üë®‚Äç‚öïÔ∏è <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:</b>
{result['doctor']}

{urgency_emoji.get(result['urgency'], '‚ö™')} <b>–°—Ä–æ—á–Ω–æ—Å—Ç—å:</b>
{urgency_text.get(result['urgency'], '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}

üìã <b>–ù–∞ –æ—Å–Ω–æ–≤–µ:</b>
‚Ä¢ –°–∏–º–ø—Ç–æ–º—ã: {', '.join(all_symptoms)}
‚Ä¢ –î–∞–≤–Ω–æ—Å—Ç—å: {data['duration']}

üí° <b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b>
{result['reasoning']}

<b>‚ö†Ô∏è –í–ê–ñ–ù–û:</b>
–≠—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤. –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑ –º–æ–∂–µ—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤—Ä–∞—á –ø–æ—Å–ª–µ –æ—Å–º–æ—Ç—Ä–∞."""
    
    await message.answer(
        recommendation_text,
        reply_markup=consultation_result_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()


@router.message(ConsultationStates.final_confirmation, F.text == "‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Å–∏–º–ø—Ç–æ–º—ã")
async def add_more_symptoms_from_final(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å–∏–º–ø—Ç–æ–º–æ–≤ —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = await state.get_data()
    suggested = data.get("ai_suggested_symptoms", [])
    selected = data.get("additional_symptoms", [])
    
    await message.answer(
        "‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å):</b>\n\n"
        "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ —Å–∏–º–ø—Ç–æ–º—ã –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å. "
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ - –Ω–∞–∂–º–∏—Ç–µ <b>‚úÖ –ì–æ—Ç–æ–≤–æ</b>",
        reply_markup=additional_symptoms_keyboard(suggested, selected),
        parse_mode="HTML"
    )
    await state.set_state(ConsultationStates.selecting_additional_symptoms)


@router.message(ConsultationStates.final_confirmation, F.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
async def restart_consultation(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ"""
    await start_consultation(message, state)


# === –†–ï–ó–£–õ–¨–¢–ê–¢ ===

@router.callback_query(F.data == "book_appointment")
async def book_appointment(callback: CallbackQuery):
    """–ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"""
    await callback.answer(
        "üìÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        show_alert=True
    )


# === –ò–°–¢–û–†–ò–Ø –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ô ===

@router.message(F.text == "üìã –ú–æ–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")
@router.callback_query(F.data == "view_history")
async def view_consultations(event: Message | CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
    if isinstance(event, CallbackQuery):
        message = event.message
        user_id = message.chat.id
        await event.answer()
    else:
        message = event
        user_id = event.from_user.id
    
    consultations = await db.get_user_consultations(user_id, limit=10)
    
    if not consultations:
        await message.answer(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.\n\n"
            "–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤—Ä–∞—á–∞.",
            reply_markup=main_menu_keyboard()
        )
        return
    
    history_text = "üìã <b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:</b>\n\n"
    
    for i, cons in enumerate(consultations[:5], 1):
        import json
        from datetime import datetime
        
        symptoms = json.loads(cons["symptoms"])
        created_at = datetime.fromisoformat(cons["created_at"])
        
        urgency_emoji = {
            "low": "üü¢",
            "medium": "üü°",
            "high": "üü†",
            "emergency": "üî¥"
        }
        
        history_text += f"{i}. <b>{cons['recommended_doctor']}</b> {urgency_emoji.get(cons['urgency_level'], '‚ö™')}\n"
        history_text += f"   üìÖ {created_at.strftime('%d.%m.%Y %H:%M')}\n"
        history_text += f"   üìã –°–∏–º–ø—Ç–æ–º—ã: {', '.join(symptoms[:3])}{'...' if len(symptoms) > 3 else ''}\n\n"
    
    await message.answer(history_text, parse_mode="HTML", reply_markup=main_menu_keyboard())


# === –û–¢–ú–ï–ù–ê ===

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
@router.callback_query(F.data == "cancel_consultation")
async def cancel_consultation(event: Message | CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    await state.clear()
    
    if isinstance(event, CallbackQuery):
        await event.message.answer(
            "‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=main_menu_keyboard()
        )
        await event.answer()
    else:
        await event.answer(
            "‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=main_menu_keyboard()
        )
